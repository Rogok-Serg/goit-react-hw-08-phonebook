{"version":3,"file":"static/js/565.51235af6.chunk.js","mappings":"yMAuCA,UAlCkB,WAChB,IAAMA,GAAkBC,EAAAA,EAAAA,IAAYC,EAAAA,IAE9BC,GAAWC,EAAAA,EAAAA,MAUjB,OAAIJ,GAAwB,SAAC,KAAD,CAAUK,GAAG,eAGvC,4BACE,wBAAI,6BACJ,kBAAMC,SAdgB,SAAAC,GACxBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACTC,EAAQF,EAAKG,UAAUC,MACvBC,EAAWL,EAAKM,aAAaF,MACnCV,GAASa,EAAAA,EAAAA,IAAU,CAAEL,MAAAA,EAAOG,SAAAA,KAC5BL,EAAKQ,OACN,EAOG,WACE,8BACE,uBAAG,YACH,kBAAOC,KAAK,YAAYC,KAAK,QAAQC,UAAQ,QAE/C,8BACE,uBAAG,eACH,kBAAOF,KAAK,eAAeC,KAAK,WAAWC,UAAQ,EAACC,UAAW,QAEjE,mBACA,mBAAQF,KAAK,SAAb,SAAsB,iBAI7B,C","sources":["page/LoginPage/LoginPage.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { loginUser } from 'redux/authentificated/operations';\nimport { selectAuthentificated } from 'redux/authentificated/authSelectors';\n\nconst LoginPage = () => {\n  const authentificated = useSelector(selectAuthentificated);\n\n  const dispatch = useDispatch();\n  const handleSabmitLogin = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const email = form.userEmail.value;\n    const password = form.userPassword.value;\n    dispatch(loginUser({ email, password }));\n    form.reset();\n  };\n\n  if (authentificated) return <Navigate to=\"/contacts\" />;\n\n  return (\n    <div>\n      <h1>Login Into Your Account</h1>\n      <form onSubmit={handleSabmitLogin}>\n        <label>\n          <p>Email:</p>\n          <input name=\"userEmail\" type=\"email\" required />\n        </label>\n        <label>\n          <p>Password:</p>\n          <input name=\"userPassword\" type=\"password\" required minLength={7} />\n        </label>\n        <br />\n        <button type=\"submit\">Sing in</button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"names":["authentificated","useSelector","selectAuthentificated","dispatch","useDispatch","to","onSubmit","e","preventDefault","form","currentTarget","email","userEmail","value","password","userPassword","loginUser","reset","name","type","required","minLength"],"sourceRoot":""}